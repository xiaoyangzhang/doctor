package com.yhyt.health.service.api;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.yhyt.health.constant.Constants;
import com.yhyt.health.constant.DoctorConstant;
import com.yhyt.health.constant.ResultCode;
import com.yhyt.health.mapper.*;
import com.yhyt.health.model.Doctor;
import com.yhyt.health.model.DoctorRequestpatient;
import com.yhyt.health.model.PatientCasearchives;
import com.yhyt.health.model.PatientDialogCase;
import com.yhyt.health.model.vo.DialogAppointmentTransferVo;
import com.yhyt.health.model.vo.DialogAppointmentVo;
import com.yhyt.health.model.vo.PatientDetailVo;
import com.yhyt.health.model.vo.app.PatientAppVO;
import com.yhyt.health.result.AppResult;
import com.yhyt.health.service.RedisService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;


/**
 * 病人详情实现类
 *
 * @author gsh
 * @create 2017-09-01 15:29
 **/
@Service
public class PatientCasearchivesApiImpl implements PatientCasearchivesApi {

    @Autowired
    private RedisService redisService;
    @Autowired
    private DialogAppointmentMapper dialogAppointmentMapper;
    @Autowired
    private PatientCasearchivesMapper patientCasearchivesMapper;
    @Autowired
    private PatientDialogCaseMapper patientDialogCaseMapper;
    @Autowired
    private DialogAppointmentTransferMapper dialogAppointmentTransferMapper;
    @Autowired
    private PatientDiagnosePicsMapper patientDiagnosePicsMapper;
    @Autowired
    private DoctorRequestpatientMapper doctorRequestpatientMapper;
    @Autowired
    private DoctorConstant doctorConstant;




    private static Logger logger = LoggerFactory.getLogger(HospitalApiImpl.class);

    @Override
    public AppResult getPatientCasearchives(String token, PatientCasearchives patientCasearchives) {
        AppResult appResult = new AppResult();
        //预约 转诊 求诊的id
        Long id = patientCasearchives.getId();
        appResult.setResultCode(ResultCode.SUCCESS);
        if (null == patientCasearchives.getDepartmentId()) {
            //获取当前医生
            Doctor doctor = (Doctor) redisService.get("doctors", token);
            patientCasearchives.setDepartmentId(doctor.getDepartmentId());
        }
        Map<String, Object> map = new HashMap<String, Object>();
        if (null == patientCasearchives.getDialogId()) {
            map.put("departmentId", patientCasearchives.getDepartmentId());
            map.put("patientId", patientCasearchives.getPatientId());
        } else {
            map.put("dialogId", patientCasearchives.getDialogId());
        }
        //查询患者基本信息
        PatientDetailVo patientDetailVo = patientCasearchivesMapper.selectPatientCasearchives(map);
        if (null == patientDetailVo) {
            appResult.setResultCode(ResultCode.SUCCESS);
            return appResult;
        }
        //求诊
        if ("1".equals(String.valueOf(patientCasearchives.getType()))) {
            patientDetailVo.setId(id);
        }
        //预约
        if ("2".equals(String.valueOf(patientCasearchives.getType()))) {
            Map<String, Object> mapAppointMent = new HashMap<String, Object>();
            mapAppointMent.put("id", patientCasearchives.getId());
            DialogAppointmentVo dialogAppointmentVo = dialogAppointmentMapper.getDialogAppointment(mapAppointMent);
            patientDetailVo.setId(dialogAppointmentVo.getId());
            patientDetailVo.setAppointmentName(dialogAppointmentVo.getDoctorNameAppointment());
            patientDetailVo.setAppointmentDepartment(dialogAppointmentVo.getDepartmentName());
            patientDetailVo.setAppointmentHospital(dialogAppointmentVo.getHospitalName());
        }
        //转诊
        if ("3".equals(String.valueOf(patientCasearchives.getType()))) {
            Map<String, Object> mapTransfer = new HashMap<String, Object>();
            mapTransfer.put("id", patientCasearchives.getId());
            mapTransfer.put("departmentId", patientCasearchives.getDepartmentId());
            DialogAppointmentTransferVo dialogAppointmentTransferVo = dialogAppointmentTransferMapper.getDialogAppointmentTransfers(mapTransfer);
            patientDetailVo.setId(dialogAppointmentTransferVo.getId());
            patientDetailVo.setAppointmentName(dialogAppointmentTransferVo.getLaunchDoctorName());
            patientDetailVo.setAppointmentDepartment(dialogAppointmentTransferVo.getDepartmentName());
            patientDetailVo.setAppointmentHospital(dialogAppointmentTransferVo.getHospitalName());
        }
        //查询病例
        PatientDialogCase patientDialogCase = patientDialogCaseMapper.selectPatientDialogCase(map);
        if (null == patientDialogCase) {
            appResult.getBody().put("patientDetail", patientDetailVo);
            return appResult;
        }
        patientDetailVo.setDiagnoseDescribePics(patientDiagnosePicsMapper.selectByCaseIdAndType(patientDialogCase.getCaseId(), (byte) 5));
        patientDetailVo.setDiagnoseCasePics(patientDiagnosePicsMapper.selectByCaseIdAndType(patientDialogCase.getCaseId(), (byte) 2));
        patientDetailVo.setDiagnoseInspectPics(patientDiagnosePicsMapper.selectByCaseIdAndType(patientDialogCase.getCaseId(), (byte) 3));

        appResult.getBody().put("patientDetail", patientDetailVo);
        return appResult;
    }

    @Override
    public AppResult getDoctorRequestpatient(String token, DoctorRequestpatient doctorRequestpatient,Integer pageIndex,Integer pageSize) {
        if (null == pageIndex || pageIndex == 0){
            pageIndex= Constants.PAGEINDEX;
        }
        if (null == pageSize || pageSize==0){
            pageSize=Constants.PAGESIZE;
        }
        if (null == doctorRequestpatient.getDepartmentId()) {
            //获取当前医生
            Doctor doctor = (Doctor) redisService.get("doctors", token);
            doctorRequestpatient.setDepartmentId(doctor.getDepartmentId());
        }
        AppResult appResult = new AppResult();
        appResult.setResultCode(ResultCode.SUCCESS);
        Page page = PageHelper.startPage(pageIndex,pageSize);
        PageInfo<PatientAppVO> pageInfo = new PageInfo<PatientAppVO>(doctorRequestpatientMapper.getNewRequestPatientList(doctorRequestpatient.getDepartmentId()));
        appResult.getBody().put("list", pageInfo.getList());
        return appResult;
    }

    @Override
    public AppResult updateDoctorRequestpatient(String token, DoctorRequestpatient doctorRequestpatient) {
        Doctor doctor = (Doctor) redisService.get(doctorConstant.getRedis().get("global"), token);
        doctorRequestpatient.setOperator(doctor.getId()+"");
        doctorRequestpatient.setUpdateTime(new Date());
        doctorRequestpatientMapper.updateByPrimaryKeySelective(doctorRequestpatient);
        AppResult appResult = new AppResult();
        appResult.setResultCode(ResultCode.SUCCESS);
        return appResult;
    }
}
